{"version":3,"sources":["Node.js","data.js","App.js","serviceWorker.js","index.js"],"names":["Node","forwardRef","ref","data","length","onChange","onBackspace","node","style","width","height","textAlign","transform","color","number","type","className","backgroundColor","main","value","onKeyDown","rawData","index","text","offset","question","left","reduce","acc","next","right","mutatedData","map","word","Array","fill","split","letter","letterIndex","flat","d","key","App","useState","state","setState","refs","useRef","e","keyCode","current","focus","gridTemplateColumns","el","target","toUpperCase","tempData","start","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.840697cb.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\n\nconst Node = forwardRef(({ data, length, onChange, onBackspace }, ref) => {\n  // console.log(data);\n  if (data.node === \"empty\") {\n    return (\n      <div\n        ref={ref}\n        style={{\n          width: `calc(90vw / ${length}`,\n          height: `calc(90vw / ${length}`\n        }}\n      />\n    );\n  }\n\n  if (data.node === \"number\") {\n    return (\n      <div\n        style={{\n          textAlign: \"right\",\n          transform: \"translate(-3px, 3px)\",\n          color: \"#fd0\"\n        }}\n      >\n        {data.number}.\n      </div>\n    );\n  }\n\n  return (\n    <input\n      ref={ref}\n      type=\"text\"\n      className=\"node\"\n      style={{\n        width: `calc(90vw / ${length}`,\n        height: `calc(90vw / ${length}`,\n        backgroundColor: data.main ? \"#fd0\" : \"ivory\"\n      }}\n      value={data.value}\n      onChange={onChange}\n      onKeyDown={onBackspace}\n    />\n  );\n});\n\nexport default Node;\n","const rawData = [\n  {\n    index: 1,\n    text: \"BAPTIST\",\n    offset: 0,\n    question: \"Protestant som gillar att bada\"\n  },\n  { index: 2, text: \"SPEX\", offset: 2, question: \"Ett sorts kul spektakel\" },\n  {\n    index: 3,\n    text: \"OMSTART\",\n    offset: 5,\n    question: \"Frekvent oral åhörarorder\"\n  },\n  {\n    index: 4,\n    text: \"NAPOLEON\",\n    offset: 0,\n    question: \"En småvuxen komplex korsikan\"\n  },\n  {\n    index: 5,\n    text: \"AMPEL\",\n    offset: 0,\n    question: \"En liten kruka som man hänger blommor i från taket\"\n  },\n  {\n    index: 6,\n    text: \"DESIRE\",\n    offset: 0,\n    question: \"Du skriver en låttext på engelska och vill rimma på eld\"\n  },\n  {\n    index: 7,\n    text: \"BLOCKAD\",\n    offset: 2,\n    question: \"Konjunktursaboterande filter mellan USA och Kina\"\n  },\n  {\n    index: 8,\n    text: \"SCOUTER\",\n    offset: 4,\n    question: \"Samlar lappar men saknar ovvar\"\n  },\n  { index: 9, text: \"T\", offset: 0, question: \"Ett T\" },\n  {\n    index: 10,\n    text: \"ELISABETH\",\n    offset: 0,\n    question: \"Världens äldsta monark\"\n  }\n];\n\nconst left = rawData.reduce(\n  (acc, next) => (next.offset > acc ? next.offset : acc),\n  0\n);\nconst right = rawData.reduce(\n  (acc, next) =>\n    next.text.length - next.offset > acc ? next.text.length - next.offset : acc,\n  0\n);\nconst length = 2 + left + right;\n\nconst mutatedData = rawData.map(word => {\n  return [\n    ...new Array(left - word.offset).fill({\n      node: \"empty\"\n    }),\n    { node: \"number\", number: word.index },\n    ...word.text.split(\"\").map((letter, letterIndex) => ({\n      node: \"input\",\n      letter,\n      main: letterIndex === word.offset,\n      value: \"\"\n    })),\n    ...new Array(right - (word.text.length - word.offset) + 1).fill({\n      node: \"empty\"\n    })\n  ];\n});\nconst data = [\n  [\n    ...new Array(left + 1).fill({\n      node: \"empty\"\n    }),\n    { node: \"number\", number: 0 },\n    ...new Array(right).fill({\n      node: \"empty\"\n    })\n  ],\n  ...mutatedData\n]\n  .flat()\n  .map((d, key) => ({ ...d, key }));\n\nexport { rawData, data, length };\n","import React, { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport Node from \"./Node\";\nimport { rawData, data, length } from \"./data\";\n\nfunction App() {\n  const [state, setState] = useState(data);\n  const refs = useRef({});\n\n  const onBackspace = index => e => {\n    if (\n      state[index].value === \"\" &&\n      e.keyCode === 8 &&\n      state[index - 1].node === \"input\"\n    ) {\n      refs.current[index - 1].focus();\n    }\n  };\n\n  const onChange = index => e => {\n    if (e.target.value.length > 1) {\n      return;\n    }\n    const value = e.target.value.toUpperCase();\n    const tempData = [...state];\n    tempData[index].value = value;\n    setState(tempData);\n    if (value.length === 1) {\n      refs.current[index + 1].focus();\n    }\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"header\">Manusflätan 20/21</header>\n      <div\n        className=\"grid\"\n        style={{\n          gridTemplateColumns: `repeat(${length}, 1fr`\n        }}\n      >\n        {state.map(data => (\n          <Node\n            ref={el => (refs.current[data.key] = el)}\n            key={data.key}\n            data={data}\n            length={length}\n            onChange={onChange(data.key)}\n            onBackspace={onBackspace(data.key)}\n          />\n        ))}\n      </div>\n      <div style={{ width: \"100%\" }}>\n        <ol style={{ color: \"#fd0\" }} start=\"0\">\n          <li>\n            <span style={{ color: \"ivory\" }}>Temat på nästa års spex</span>\n          </li>\n          {rawData.map(d => (\n            <li key={d.index}>\n              <span style={{ color: \"ivory\" }}>{d.question}</span>\n            </li>\n          ))}\n        </ol>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}