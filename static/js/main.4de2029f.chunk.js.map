{"version":3,"sources":["Node.js","data.js","App.js","serviceWorker.js","index.js"],"names":["classes","classList","filter","Boolean","join","Node","forwardRef","ref","data","length","onChange","onBackspace","finished","node","className","style","gridColumn","column","justifySelf","alignSelf","number","width","height","main","type","backgroundColor","value","onKeyDown","rawData","index","text","offset","question","left","reduce","acc","next","right","mutatedData","map","word","split","letter","letterIndex","flat","d","key","App","useState","state","setState","setFinished","refs","useRef","useEffect","every","answers","getStorage","tempState","i","setStorage","e","target","toUpperCase","tempData","updateStorage","current","focus","selectNextNode","gridTemplateColumns","el","keyCode","start","localStorage","setItem","JSON","stringify","parse","getItem","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4de2029f.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\n\nconst Node = forwardRef(\n  ({ data, length, onChange, onBackspace, finished }, ref) => {\n    if (data.node === \"number\") {\n      return (\n        <div\n          className={classes([\"text-gold\", finished && \"fadeNode\"])}\n          style={{\n            gridColumn: data.column + 1,\n            justifySelf: \"end\",\n            alignSelf: \"end\"\n          }}\n        >\n          <span className=\"rowNumber\">{data.number}.</span>\n        </div>\n      );\n    }\n\n    return (\n      <div\n        style={{\n          width: `calc(100vw / ${length} - 4px)`,\n          height: `calc(100vw / ${length} - 4px)`\n        }}\n      >\n        <input\n          className={classes([\"node\", finished && !data.main && \"fadeNode\"])}\n          ref={ref}\n          type=\"text\"\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            backgroundColor: data.main ? \"#fd0\" : \"ivory\"\n          }}\n          value={data.value}\n          onChange={onChange}\n          onKeyDown={onBackspace}\n        />\n      </div>\n    );\n  }\n);\n\nfunction classes(classList) {\n  return classList.filter(Boolean).join(\" \");\n}\n\nexport default Node;\n","const rawData = [\n  {\n    index: 1,\n    text: \"BAPTIST\",\n    offset: 0,\n    question: \"Frikyrklig som gillar att bada\"\n  },\n  { index: 2, text: \"SPEX\", offset: 2, question: \"Ett sorts kul spektakel\" },\n  {\n    index: 3,\n    text: \"OMSTART\",\n    offset: 5,\n    question: \"Verbal order om upprepning\"\n  },\n  {\n    index: 4,\n    text: \"NAPOLEON\",\n    offset: 0,\n    question: \"En komplex korsikan\"\n  },\n  {\n    index: 5,\n    text: \"AMPEL\",\n    offset: 0,\n    question: \"En liten kruka som man hänger blommor i från taket\"\n  },\n  {\n    index: 6,\n    text: \"DESIRE\",\n    offset: 0,\n    question: \"Du skriver en låttext på engelska och vill rimma på eld\"\n  },\n  {\n    index: 7,\n    text: \"BLOCKAD\",\n    offset: 2,\n    question: \"Potentiellt konjunktursaboterande hinder mellan USA och Kina\"\n  },\n  {\n    index: 8,\n    text: \"SCOUTER\",\n    offset: 4,\n    question: \"Samlar tyglappar men saknar ovvar\"\n  },\n  {\n    index: 9,\n    text: \"KONTRABAND\",\n    offset: 3,\n    question: \"Coolare ord för smuggelgods\"\n  },\n  {\n    index: 10,\n    text: \"ELIZABETH\",\n    offset: 0,\n    question: \"Namnet på en årsrik matriark\"\n  }\n];\n\nconst left = rawData.reduce(\n  (acc, next) => (next.offset > acc ? next.offset : acc),\n  0\n);\nconst right = rawData.reduce(\n  (acc, next) =>\n    next.text.length - next.offset > acc ? next.text.length - next.offset : acc,\n  0\n);\nconst length = left + right + 1;\n\nconst mutatedData = rawData.map(word => {\n  return [\n    { node: \"number\", number: word.index, offset: word.offset },\n    ...word.text.split(\"\").map((letter, letterIndex) => ({\n      node: \"input\",\n      letter,\n      main: letterIndex === word.offset,\n      value: \"\"\n    }))\n  ];\n});\nconst data = [[{ node: \"number\", number: 0, offset: -1 }], ...mutatedData]\n  .flat()\n  .map((d, key) => ({ ...d, key, column: left - d.offset }));\n\nexport { rawData, data, length };\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport Node from \"./Node\";\nimport { rawData, data, length } from \"./data\";\n\nfunction App() {\n  const [state, setState] = useState(data);\n  const [finished, setFinished] = useState(false);\n  const refs = useRef({});\n\n  useEffect(() => {\n    if (\n      state.filter(d => d.node === \"input\").every(d => d.value === d.letter)\n    ) {\n      setFinished(true);\n    }\n  }, [state]);\n\n  useEffect(() => {\n    const answers = getStorage();\n    if (!answers) {\n      setStorage(state.map(d => d.value));\n    } else {\n      const tempState = state.map((d, i) => {\n        if (d.node === \"input\") {\n          return { ...d, value: answers[i] };\n        } else {\n          return d;\n        }\n      });\n      setState(tempState);\n    }\n  }, []);\n\n  const onBackspace = index => e => {\n    if (\n      state[index].value === \"\" &&\n      e.keyCode === 8 &&\n      state[index - 1].node === \"input\"\n    ) {\n      refs.current[index - 1].focus();\n    }\n  };\n\n  const selectNextNode = index => {\n    let node = refs.current[index + 1];\n    if (node) {\n      node.focus();\n    } else {\n      // If the node at refs.current[index] is the last of it's row,\n      // the next input row will be at index + 2 due to the number\n      // nodes\n      node = refs.current[index + 2];\n      if (node) {\n        node.focus();\n      }\n    }\n  };\n\n  const onChange = index => e => {\n    if (e.target.value.length > 1) {\n      return;\n    }\n    const value = e.target.value.toUpperCase();\n    const tempData = [...state];\n    tempData[index].value = value;\n    setState(tempData);\n    updateStorage(value, index);\n    if (value.length === 1) {\n      selectNextNode(index);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">Manusflätan 20/21</header>\n      <div className=\"content\">\n        <div\n          className=\"grid\"\n          style={{\n            gridTemplateColumns: `repeat(${length}, 1fr`,\n          }}\n        >\n          {state.map(data => (\n            <Node\n              ref={el => (refs.current[data.key] = el)}\n              key={data.key}\n              data={data}\n              length={length}\n              onChange={onChange(data.key)}\n              onBackspace={onBackspace(data.key)}\n              finished={finished}\n            />\n          ))}\n        </div>\n        <div className=\"cluesList text-gold\">\n          <ol start=\"0\">\n            <li>\n              <span className=\"text-white\">Temat på nästa års spex</span>\n            </li>\n            {rawData.map(d => (\n              <li key={d.index}>\n                <span className=\"text-white\">{d.question}</span>\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\nconst updateStorage = (value, index) => {\n  const answers = getStorage();\n  answers[index] = value;\n  setStorage(answers);\n};\n\nconst setStorage = answers => {\n  localStorage.setItem(\"braidData\", JSON.stringify(answers));\n};\n\nconst getStorage = () => {\n  try {\n    return JSON.parse(localStorage.getItem(\"braidData\"));\n  } catch (e) {}\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}